#Reemplazamos el valor 1 por NA
library(dplyr)
data1_endo <- data_endo %>%
dplyr::rename(sueldoliquido = P501_B) %>%
mutate(sueldoliquido = na_if(sueldoliquido, 1))
library(Rmisc)
intervalomedia=CI(data1_endo$sueldoliquido,ci=0.95)
intervalomedia
library(Rmisc)
intervalomedia=CI(data1_endo$sueldoliquido,ci=0.95)
intervalomedia
intervalomedia
intervalomedia=CI(na.omit(data1_endo$sueldoliquido,ci=0.95))
intervalomedia
#también podemos
library(lsr)
tabla_p1=data1_endo%>%summarise(Media = mean(sueldoliquido, na.rm=T),
min = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[1],
max = ciMean(sueldoliquido,conf = 0.95, na.rm=T)[2]
)
tabla_p1
#le damos forma a la variable
data1_endo$P319=as.factor(data1_endo$P319)
#señalamos las categorías de la variable
data1_endo$P319=factor(data1_endo$P319,
levels = levels(data1_endo$P319),
labels = c("Mismo distrito","Otro distrito"),
ordered = F)
#realizamos la tabla
prop.table(table(data1_endo$P319))
table(data1_endo$P319)
x = 9512
n = 9512 + 5575
ic_prop = prop.text(x,n,conf.level = 0.95)
ic_prop = prop.test(x,n,conf.level = 0.95)
ic_prop
#Intervalo de confianza para la media según grupos
library(lsr)
library(dplyr)
ic_grupo <- data1_endo %>%
group_by(P319) %>%
group_modify(~{
media <- mean(.x$sueldoliquido, na.rm = TRUE)
ci <- ciMean(.x$sueldoliquido, conf = 0.95, na.rm = TRUE)
tibble(Media = media, min = ci[1], max = ci[2])
})
print(ic_grupo)
library(ggplot2)
ggplot(ic_grupo, aes(x = P319, y = Media)) +
geom_errorbar(aes(ymin = min, ymax = max), width = 0.2) +
geom_point(size = 3, color = "steelblue") +  # opcional: para destacar el punto medio
geom_text(aes(label = round(Media, 2)), size = 4, vjust = -1) +
xlab("Preferencia de distrito") +
ylab("Ingreso líquido en soles") +
ylim(1400, 1700) +
theme_minimal()
#le damos formato a la variable
data1_endo$P07 = as.factor(data1_endo$P07)
#señalamos las categorías
data1_endo$P07=factor(data1_endo$P07,
levels = levels(data1_endo$P07),
labels = c("Público","Privado"),
ordered = F)
print(ic_grupo2)
#intervalos de confianza para la media según grupos
library(lsr)
ic_grupo2 <- data1_endo %>%
group_by(P07) %>%
group_modify(~{
media <- mean(.x$sueldoliquido, na.rm = TRUE)
ci <- ciMean(.x$sueldoliquido, conf = 0.95, na.rm = TRUE)
tibble(Media = media, linf = ci[1], lsup = ci[2])
})
print(ic_grupo2)
library(ggplot2)
ggplot(ic_grupo2, aes(x= P07, y =Media)) +
geom_errorbar(aes(ymin=linf, ymax=lsup), width = 0.2)+
geom_text(aes(label=paste(round(Media, 2))), size=4)+
xlab("Preferencia de distrito") + ylab("Ingreso liquido en soles")+
ylim(1000, 2000)
tabla2_endo
library(dplyr)
tabla2_endo = data1_endo %>%
dplyr::filter(P319 =="Mismo distrito" | P319 == "Otro distrito") %>%
dplyr::group_by(P07) %>%
dplyr::count(P319r=P319, name="N") %>%
dplyr::mutate(total = sum(N),
Por = N / total * 100,
err = sqrt(Por*(100-Por)/N),
liminf = Por - 1.96*err,
limsup = Por + 1.96*err)
tabla2_endo
tabla2_1 = tabla2_endo[-c(2,4),]
tabla2_1
graf2 = ggplot(tabla2_1, aes(x=P07, y=Por))+
geom_bar(stat="identity")+
geom_errorbar(aes(ymin=liminf, ymax=limsup), width=0.2)+
geom_text(aes(label=paste(round(Por, 1))), vjust=-1, size=4)+
xlab("Tipo de colegio") + ylab("Porcentaje de preferencia de trabajar en el mismo distrito")+
ylim(50, 80)
graf2
setwd("C:/Users/USUARIO/Downloads")
elecciones
library(rio)
elecciones = import("Resultados_1ra_vuelta_Version_PCM.csv")
elecciones
View(elecciones)
link = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRpIC71E9yxtnQPv96yLyF2482XAfzzCkE-AeYNYht52OnWo9MU3GMLx-yw16YsPL9aU4PSO-jH3e6D/pub?gid=297987403&single=true&output=csv'
oecd = read.csv(link)
head(oecd)
# Opción directa
names(oecd)[names(oecd) == "PAIS"] <- "country"
str(oecd)
boxplot(oecd[,c(2:7)], horizontal = F, las=2, cer.axis=0.5)
t.test(oecd$LE_ano_0, oecd$LE_5_anos, paired = TRUE)
t.test(oecd$GDP_per_ano_0, oecd$GDP_per_5_anos, paired = TRUE)
t.test(oecd$GDP_ano_0, oecd$GDP_5_anos, paired = TRUE)
library(BBmisc)
oecd_est = normalize(oecd[,c(1:7)], method = 'standardize')
boxplot(oecd_est[,c(2:7)], horizontal = F, las=2, cer.axis=0.5)
oecd_est_0 <- oecd_est[, c("PAIS", "LE_ano_0", "GDP_per_ano_0", "GDP_ano_0")]
oecd_est_0 <- oecd_est[, c("country", "LE_ano_0", "GDP_per_ano_0", "GDP_ano_0")]
oecd_est_5 <- oecd_est[, c("country", "LE_5_anos", "GDP_per_5_anos", "GDP_5_anos")]
cor(oecd_est_0[,c(2:4)])
#invertimos
oecd_est_0$GDP_ano_0 <- -oecd_est_0$GDP_ano_0
#revisamos
cor(oecd_est_0[,c(2:4)])
dataClus_0=oecd_est_0[,c(2:4)]
row.names(dataClus_0)=oecd_est_0$country
library(cluster)
g.dist_0 = daisy(dataClus_0, metric="euclidean")
## para PAM
library(factoextra)
fviz_nbclust(dataClus_0, pam,diss=g.dist_0,method = "gap_stat",k.max = 10,verbose = F)
library(kableExtra)
set.seed(123)
res.pam_0=pam(g.dist_0,3,cluster.only = F)
#nueva columna
dataClus_0$pam=res.pam_0$cluster
# ver
head(dataClus_0,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam_0,print.summary = F)
silPAM_0=data.frame(res.pam_0$silinfo$widths)
silPAM_0$country=row.names(silPAM_0)
poorPAM_0=silPAM_0[silPAM_0$sil_width<0,'country']%>%sort()
poorPAM_0
aggregate(.~ pam, data=dataClus_0,mean)
original_0=aggregate(.~ pam, data=dataClus_0,mean)
original_0[order(original_0$LE_ano_0),]
dataClus_0$pam=dplyr::recode(dataClus_0$pam, `3` = 1, `1`=2,`2`=3)
oecd_est_0$pamOECDpoor_0=oecd_est_0$country%in%poorPAM_0
oecd_est_0$pamOECD_0=as.ordered(dataClus_0$pam)
dataClus_0$pam=NULL
proyeccion_0 = cmdscale(g.dist_0, k=2,add = T)
head(proyeccion_0$points,20)
# data frame prep:
oecd_est_0$dim1 <- proyeccion_0$points[,1]
oecd_est_0$dim2 <- proyeccion_0$points[,2]
library(ggrepel)
base_0= ggplot(oecd_est_0,aes(x=dim1, y=dim2,label=row.names(dataClus_0)))
base_0 + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0, 'lines'))
# solo paises mal clusterizados
PAMlabels=ifelse(oecd_est_0$pamOECDpoor_0,oecd_est_0$country,'')
#base
base= ggplot(oecd_est_0,aes(x=dim1, y=dim2))  +
scale_color_brewer(type = 'qual',palette ='Dark2'  ) + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot=base + geom_point(size=3,
aes(color=pamOECD_0))  +
labs(title = "PAM")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines'))
# solo paises mal clusterizados
PAMlabels=ifelse(oecd_est_0$pamOECDpoor_0,oecd_est_0$country,'')
#base
base= ggplot(oecd_est_0,aes(x=dim1, y=dim2))  +
scale_color_brewer(type = 'qual',palette ='Dark2'  ) + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot=base + geom_point(size=3,
aes(color=pamOECD_0))  +
labs(title = "PAM: Clusterización año 0")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines'))
library(tinytex)
rm(list = ls()) # limpiar el working environment
linkADrive='https://docs.google.com/spreadsheets/d/e/2PACX-1vQoN_1tfvAClKCO6wjHLy7rGNdbZx2nuvTm99d2FzrwIoohr2rqetFfCLTErgYYTg/pub?gid=486140846&single=true&output=csv'
protestas=read.csv(linkADrive)
head(protestas)
str(protestas)
protestas$PP_Nac_Loc = as.factor(protestas$PP_Nac_Loc) #lo convertimos a una variable categórica ya que R lo puede leer mal
protestas$PP_Nom = as.factor(protestas$PP_Nom)  #también lo convertimos a una variable categórica
summary(protestas$CONFLICTOS)
library(DescTools)
allStats=c(summary(protestas$CONFLICTOS),
sd=sd(protestas$CONFLICTOS), # variabilidad (en relacion a la media)
skew=Skew(protestas$CONFLICTOS), # asimetria (positiva o negativa)
kurt=Kurt(protestas$CONFLICTOS), # concentración (enpinada / aplanada)
cv=CoefVar(protestas$CONFLICTOS)) # variabilidad (mayor o menor que uno)
allStats
library(ggplot2)
base=ggplot(data=protestas,
aes(x=CONFLICTOS))
histogram= base + geom_histogram(aes(y = after_stat(density)),
colour = 1, fill = "white",bins=10) +
stat_function(fun = dnorm,
args = list(mean = allStats['Mean'],
sd = allStats['sd']),col='red')
histogram
base=ggplot(data=protestas,
aes(y=CONFLICTOS))
boxplot=base + geom_boxplot()
boxplot
library(dplyr)
protestas %>%
arrange(desc(CONFLICTOS)) %>%
slice_head(n = 5)
protestas <- protestas[complete.cases(protestas), ]
summary(protestas$CONFLICTOS)
library(DescTools)
allStats=c(summary(protestas$CONFLICTOS),
sd=sd(protestas$CONFLICTOS), # variabilidad (en relacion a la media)
skew=Skew(protestas$CONFLICTOS), # asimetria (positiva o negativa)
kurt=Kurt(protestas$CONFLICTOS), # concentración (enpinada / aplanada)
cv=CoefVar(protestas$CONFLICTOS)) # variabilidad (mayor o menor que uno)
allStats
library(ggplot2)
base=ggplot(data=protestas,
aes(x=CONFLICTOS))
histogram= base + geom_histogram(aes(y = after_stat(density)),
colour = 1, fill = "white",bins=10) +
stat_function(fun = dnorm,
args = list(mean = allStats['Mean'],
sd = allStats['sd']),col='red')
histogram
base=ggplot(data=protestas,
aes(y=CONFLICTOS))
boxplot=base + geom_boxplot()
boxplot
valuesFromBox=ggplot_build(boxplot)$data[[1]]
valuesFromBox
outliersLocales=valuesFromBox$outliers[[1]]
outliersLocales
valuesFromBox[c('ymin','ymax')]
protestas[protestas$CONFLICTOS>9,]
library(dplyr)
protestas_provincias <- protestas %>%
group_by(NOM_PROV) %>%
summarise(total_conflictos = sum(CONFLICTOS, na.rm = TRUE))
protestas_provincias
library("modelsummary")
hipo = formula(CONFLICTOS ~ PP_Nac_Loc + TRANS_TOTAL_MILL + RENTA_PER + ALTITUD + PORC_EJEC + DIAS_ATRASO)
rp = glm(hipo, data = protestas,
offset = log(POBLACION),   # variable de control: población
family = poisson(link = "log"))
modelo = list('Poisson asegurado (I)' = rp)
modelsummary(modelo,
title = "Regresión Poisson",
stars = TRUE,
output = "kableExtra")
formatoNum <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelo,
fmt=formatoNum, # uso mi formula
exponentiate = T, # exponenciar!!!!!
statistic = 'conf.int',
title = "Regresión Poisson - coeficientes exponenciados",
stars = TRUE,
output = "kableExtra")
library(magrittr)
library(kableExtra)
overdispersion=AER::dispersiontest(rp,alternative='greater')$ p.value<0.05
underdispersion=AER::dispersiontest(rp,alternative='less')$ p.value<0.05
# tabla
testResult=as.data.frame(rbind(overdispersion,underdispersion))
names(testResult)='Es probable?'
testResult%>%kable(caption = "Test de Equidispersión")%>%kableExtra::kable_styling()
rqp = glm(hipo, data = protestas,
offset = log(POBLACION),
family = quasipoisson(link="log"))
modelsummary(rqp,
title = "Regresión QuasiPoisson",
stars = TRUE,
output = "kableExtra")
library(MASS)
hipo_bn = formula(CONFLICTOS ~ PP_Nac_Loc + TRANS_TOTAL_MILL + RENTA_PER + ALTITUD + PORC_EJEC + DIAS_ATRASO + offset(log(POBLACION)))
rbn = glm.nb(hipo_bn, data = protestas)
modelsummary(rbn,
title = "Regresión BinomialNegativa",
stars = TRUE,
output = "kableExtra")
todos_modelos = list('Poisson'= rp,
'Quasi Poisson'= rqp,
'Binomial Negativa'= rbn)
modelsummary(todos_modelos, fmt=formatoNum,
exponentiate = T,
statistic = 'conf.int',
title = "EXP de las Regresiones",
stars = TRUE,
output = "kableExtra")
# poisson case
performance::check_overdispersion(rp)
# quasipoisson case
performance::check_overdispersion(rqp)
# negative binomial case
library(DHARMa)
performance::check_overdispersion(rbn)
anova(rp,rqp,rbn,test = "Chisq") %>%
kable(caption = "Tabla ANOVA para comparar modelos")%>%kableExtra::kable_styling(full_width = FALSE)
lmtest::lrtest(rp,rbn)%>%
kable(caption = "loglikelihood ratio test")%>%kableExtra::kable_styling(full_width = FALSE)
modelo_bn = list('Binomial Negativa asegurado (I)' = rbn)
formatoNum <- function(x) format(x, digits = 4, scientific = FALSE)
modelsummary(modelo_bn,
fmt=formatoNum, # uso mi formula
exponentiate = T, # exponenciar!!!!!
statistic = 'conf.int',
title = "Regresión Binomial Negativa - coeficientes exponenciados",
stars = TRUE,
output = "kableExtra")
library(ggplot2)
dotwhisker::dwplot(list(BinomialNegativa=rbn),exp=T) + scale_y_discrete(labels=c("Días atraso", "Porcentaje\nejecución", "Altitud", "Renta\nper cápita", "Transferencia\ntotal", "Partido\nlocal")) + scale_color_discrete(name="Modelos para:\nCantidad de Asegurados") + geom_vline(
xintercept = 1,
colour = "grey60",
linetype = 2
)
ggplot(protestas, aes(x = PP_Nac_Loc, y = CONFLICTOS)) +
geom_boxplot(fill = "skyblue") +
scale_x_discrete(labels = c(
"1" = "Partido Nacional",
"2" = "Partido Local")) +
labs(title = "Distribución de conflictos por partido",
x = "Partido",
y = "Número de conflictos") +
theme_minimal()+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
library(dplyr)
protestas %>%
count(PP_Nac_Loc) %>%
ggplot(aes(x= PP_Nac_Loc, y = n, fill = PP_Nac_Loc)) +
geom_col() +
scale_x_discrete(labels = c(
"1" = "Partido Nacional",
"2" = "Partido Local")) +
labs(tittle= "Distribución de distritos por tipo de partido",
x = "Tipo de partido",
y = "Número de distritos") +
theme_minimal()
library(dplyr)
presupuesto_provincia <- protestas %>%
group_by(NOM_PROV) %>%
summarise(presupuesto_total = sum(TRANS_TOTAL_MILL, na.rm = TRUE)) %>%
arrange(desc(presupuesto_total))
library(ggplot2)
ggplot(presupuesto_provincia, aes(x = reorder(NOM_PROV,presupuesto_total), y = presupuesto_total)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Transferencia por provincia", x = "Provincia", y = "Transferencia total por canon gasífero (millones)") +
theme(plot.title = element_text(hjust = 0.5))
library(dplyr)
library(ggplot2)
# 1. Obtener presupuesto por provincia
provincia_df <- protestas %>%
group_by(NOM_PROV) %>%
summarise(TRANS_TOTAL_MILL = sum(TRANS_TOTAL_MILL, na.rm = TRUE))
# 2. Obtener presupuesto de Megantoni
megantoni_df <- protestas %>%
filter(NOM_DIST == "MEGANTONI") %>%
summarise(NOM_PROV = "MEGANTONI",
TRANS_TOTAL_MILL = sum(TRANS_TOTAL_MILL, na.rm = TRUE))
# 3. Unir ambos
comparacion_df <- bind_rows(provincia_df, megantoni_df)
# 4. Graficar
ggplot(comparacion_df, aes(x = reorder(NOM_PROV, TRANS_TOTAL_MILL), y = TRANS_TOTAL_MILL)) +
geom_col(fill = ifelse(comparacion_df$NOM_PROV == "MEGANTONI", "red", "steelblue")) +
coord_flip() +
labs(title = "Transferencia por provincia (incluyendo Megantoni)",
x = "Provincia / Distrito",
y = "Transferencia total por canon gasífero (millones)") +
theme(plot.title = element_text(hjust = 0.5))
setwd("C:/Users/USUARIO/Documents/GitHub/Luis_Maestria")
library(writexl)
write_xlsx(protestas, path = "protestas.xlsx")
cor(oecd_est_5[,c(2:4)])
link = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRpIC71E9yxtnQPv96yLyF2482XAfzzCkE-AeYNYht52OnWo9MU3GMLx-yw16YsPL9aU4PSO-jH3e6D/pub?gid=297987403&single=true&output=csv'
oecd = read.csv(link)
head(oecd)
# Opción directa
names(oecd)[names(oecd) == "PAIS"] <- "country"
str(oecd)
boxplot(oecd[,c(2:7)], horizontal = F, las=2, cer.axis=0.5)
t.test(oecd$LE_ano_0, oecd$LE_5_anos, paired = TRUE)
t.test(oecd$GDP_per_ano_0, oecd$GDP_per_5_anos, paired = TRUE)
t.test(oecd$GDP_ano_0, oecd$GDP_5_anos, paired = TRUE)
library(BBmisc)
oecd_est = normalize(oecd[,c(1:7)], method = 'standardize')
boxplot(oecd_est[,c(2:7)], horizontal = F, las=2, cer.axis=0.5)
oecd_est_0 <- oecd_est[, c("country", "LE_ano_0", "GDP_per_ano_0", "GDP_ano_0")]
oecd_est_5 <- oecd_est[, c("country", "LE_5_anos", "GDP_per_5_anos", "GDP_5_anos")]
cor(oecd_est_0[,c(2:4)])
#invertimos
oecd_est_0$GDP_ano_0 <- -oecd_est_0$GDP_ano_0
#revisamos
cor(oecd_est_0[,c(2:4)])
dataClus_0=oecd_est_0[,c(2:4)]
row.names(dataClus_0)=oecd_est_0$country
library(cluster)
g.dist_0 = daisy(dataClus_0, metric="euclidean")
## para PAM
library(factoextra)
fviz_nbclust(dataClus_0, pam,diss=g.dist_0,method = "gap_stat",k.max = 10,verbose = F)
library(kableExtra)
set.seed(123)
res.pam_0=pam(g.dist_0,3,cluster.only = F)
#nueva columna
dataClus_0$pam=res.pam_0$cluster
# ver
head(dataClus_0,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam_0,print.summary = F)
silPAM_0=data.frame(res.pam_0$silinfo$widths)
silPAM_0$country=row.names(silPAM_0)
poorPAM_0=silPAM_0[silPAM_0$sil_width<0,'country']%>%sort()
poorPAM_0
aggregate(.~ pam, data=dataClus_0,mean)
original_0=aggregate(.~ pam, data=dataClus_0,mean)
original_0[order(original_0$LE_ano_0),]
dataClus_0$pam=dplyr::recode(dataClus_0$pam, `3` = 1, `1`=2,`2`=3)
dataClus_0$pam=dplyr::recode(dataClus_0$pam, `3` = 1, `1`=2,`2`=3)
oecd_est_0$pamOECDpoor_0=oecd_est_0$country%in%poorPAM_0
oecd_est_0$pamOECD_0=as.ordered(dataClus_0$pam)
dataClus_0$pam=NULL
proyeccion_0 = cmdscale(g.dist_0, k=2,add = T)
head(proyeccion_0$points,20)
# data frame prep:
oecd_est_0$dim1 <- proyeccion_0$points[,1]
oecd_est_0$dim2 <- proyeccion_0$points[,2]
library(ggrepel)
base_0= ggplot(oecd_est_0,aes(x=dim1, y=dim2,label=row.names(dataClus_0)))
base_0 + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0, 'lines'))
# solo paises mal clusterizados
PAMlabels=ifelse(oecd_est_0$pamOECDpoor_0,oecd_est_0$country,'')
#base
base= ggplot(oecd_est_0,aes(x=dim1, y=dim2))  +
scale_color_brewer(type = 'qual',palette ='Dark2'  ) + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot=base + geom_point(size=3,
aes(color=pamOECD_0))  +
labs(title = "PAM: Clusterización año 0")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines'))
cor(oecd_est_5[,c(2:4)])
#invertimos
oecd_est_5$GDP_5_anos <- -oecd_est_5$GDP_5_anos
#revisamos
cor(oecd_est_5[,c(2:4)])
dataClus_5=oecd_est_5[,c(2:4)]
row.names(dataClus_5)=oecd_est_5$country
library(cluster)
g.dist_5 = daisy(dataClus_5, metric="euclidean")
## para PAM
library(factoextra)
fviz_nbclust(dataClus_5, pam,diss=g.dist_5,method = "gap_stat",k.max = 10,verbose = F)
library(kableExtra)
set.seed(123)
res.pam_5=pam(g.dist_5,3,cluster.only = F)
#nueva columna
dataClus_5$pam=res.pam_5$cluster
# ver
head(dataClus_5,15)%>%kbl()%>%kable_styling()
fviz_silhouette(res.pam_5,print.summary = F)
silPAM_5=data.frame(res.pam_5$silinfo$widths)
silPAM_5$country=row.names(silPAM_5)
poorPAM_5=silPAM_5[silPAM_5$sil_width<0,'country']%>%sort()
poorPAM_5
aggregate(.~ pam, data=dataClus_5,mean)
original_5=aggregate(.~ pam, data=dataClus_5,mean)
original_5[order(original_5$LE_ano_5),]
original_5=aggregate(.~ pam, data=dataClus_5,mean)
original_5[order(original_5$LE_5_anos),]
dataClus_5$pam=dplyr::recode(dataClus_5$pam, `2` = 1, `1`=2,`3`=3)
oecd_est_5$pamOECDpoor_5=oecd_est_5$country%in%poorPAM_5
oecd_est_5$pamOECD_5=as.ordered(dataClus_5$pam)
dataClus_5$pam=NULL
proyeccion_5 = cmdscale(g.dist_5, k=2,add = T)
head(proyeccion_5$points,20)
# data frame prep:
oecd_est_5$dim1 <- proyeccion_5$points[,1]
oecd_est_5$dim2 <- proyeccion_5$points[,2]
library(ggrepel)
base_5= ggplot(oecd_est_5,aes(x=dim1, y=dim2,label=row.names(dataClus_5)))
base_5 + geom_text_repel(size=3, max.overlaps = 50,min.segment.length = unit(0, 'lines'))
# solo paises mal clusterizados
PAMlabels=ifelse(oecd_est_5$pamOECDpoor_5,oecd_est_5$country,'')
#base
base= ggplot(oecd_est_5,aes(x=dim1, y=dim2))  +
scale_color_brewer(type = 'qual',palette ='Dark2'  ) + labs(subtitle = "Se destacan los países mal clusterizados")
pamPlot=base + geom_point(size=3,
aes(color=pamOECD_5))  +
labs(title = "PAM: Clusterización año 5")
# hacer notorios los paises mal clusterizados
pamPlot + geom_text_repel(size=4,
aes(label=PAMlabels),
max.overlaps = 50,
min.segment.length = unit(0, 'lines'))
View(oecd_est_0)
View(oecd)
